name: Pull Request

on:
  pull_request:
    branches: [master]
    paths-ignore:
      - '**/README.md'

jobs:
  build-app:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Cache Nuget
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache App
        uses: actions/cache@v2
        with:
          path: '**/bin/Release'
          key: ${{ runner.os }}-app-${{ github.sha }}

      - name: Build App
        run: make build

  build-docker-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker Image
        uses: actions/cache@v2
        with:
          path: /tmp/library-api.tar
          key: ${{ runner.os }}-docker-images-${{ github.sha }}

      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          load: true
          tags: library-api:latest
          outputs: type=docker,dest=/tmp/library-api.tar
          build-args: |
            GIT_SHA=${{ github.sha }}

  acceptance-test:
    runs-on: ubuntu-latest
    needs:
      - build-app
      - build-docker-image

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Cache Docker Image
        uses: actions/cache@v2
        with:
          path: /tmp/library-api.tar
          key: ${{ runner.os }}-docker-images-${{ github.sha }}

      - name: Cache App
        uses: actions/cache@v2
        with:
          path: '**/bin/Release'
          key: ${{ runner.os }}-app-${{ github.sha }}

      - name: Load Docker Image
        run: |
          docker load --input /tmp/library-api.tar

      - name: Start Docker
        run: |
          docker-compose up -d
          ./scripts/serviceup.sh
        env:
          IS_PR_WORKFLOW: true

      - name: Acceptance Test
        run: dotnet test Library.AcceptanceTests/Library.AcceptanceTests.csproj --no-build --no-restore -c Release --logger "console;verbosity=detailed"
        env:
          GIT_SHA: ${{ github.sha }}
          IS_PR_WORKFLOW: true

  scan-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x # security-scan tool does not support .NET 6

      - name: Security Scan
        run: |
          dotnet tool install --global security-scan --version 5.6.0
          security-scan Library.sln --excl-proj="*Tests/**" -n --cwe

  scan-container:
    runs-on: ubuntu-latest
    needs:
      - build-docker-image
    steps:
      - name: Cache Docker Image
        uses: actions/cache@v2
        with:
          path: /tmp/library-api.tar
          key: ${{ runner.os }}-docker-images-${{ github.sha }}

      - name: Load Docker Image
        run: |
          docker load --input /tmp/library-api.tar

      - name: Container Scanner
        uses: Azure/container-scan@v0
        with:
          image-name: library-api:latest

  verify-infra:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Verify Infrastructure
        run: make setup-infra
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          DOCKER_REGISTRY_SERVER_URL: docker.pkg.github.com/${{ github.repository }}
          DOCKER_REGISTRY_SERVER_USERNAME: ${{ github.repository_owner }}
          DOCKER_REGISTRY_SERVER_PASSWORD: ${{ secrets.LIBRARY_PAT }}
          PULUMI_STACK: dev
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          IS_PR_WORKFLOW: true
